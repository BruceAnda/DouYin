apply plugin: 'com.android.library'

def extraLibPath = meisheSdkExtraPath(rootDir)

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.3'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 34
        versionName "2.17.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        ndk {
            abiFilters "armeabi-v7a"  // 指定要ndk需要兼容的架构(这样其他依赖包里mips,x86,armeabi,arm-v8之类的so会被过滤掉)
        }
        flavorDimensions "versionCode"
    }


    signingConfigs {
//        release {
//            storeFile file("E:/FaceU/meishe.jks")   //签名文件全路径
//            storePassword "app001ls"
//            keyAlias "key0"
//            keyPassword "app001"
//        }
        debug {
        }
    }

    buildTypes {
        release {
            buildConfigField "String", "HUMAN_AI_TYPE", "\"MS\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            shrinkResources false
            signingConfig signingConfigs.debug
        }
        release_MS_ST {
            buildConfigField "String", "HUMAN_AI_TYPE", "\"MS_ST\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            shrinkResources false
            signingConfig signingConfigs.debug
        }
        release_faceU {
            buildConfigField "String", "HUMAN_AI_TYPE", "\"FaceU\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            shrinkResources false
            signingConfig signingConfigs.debug
        }
        debug {
            buildConfigField "String", "HUMAN_AI_TYPE", "\"MS\""
            minifyEnabled false
            buildConfigField "Boolean", "PRINT_LOG", "true"
            signingConfig signingConfigs.debug
            debuggable true
        }
        debug_MS_ST {
            buildConfigField "String", "HUMAN_AI_TYPE", "\"MS_ST\""
            minifyEnabled false
            buildConfigField "Boolean", "PRINT_LOG", "true"
            signingConfig signingConfigs.debug
            debuggable true
        }
        debug_faceU {
            buildConfigField "String", "HUMAN_AI_TYPE", "\"FaceU\""
            minifyEnabled false
            buildConfigField "Boolean", "PRINT_LOG", "true"
            signingConfig signingConfigs.debug
            debuggable true
        }

        debug {
            packagingOptions {
                doNotStrip '**.so'
            }
        }
    }

    task libCopy(type: Copy) {
        copy {
            from extraLibPath + 'lib/android_armv7'
            into 'src/main/jniLibs/armeabi-v7a'
            include '*.so'
        }
    }

    repositories {
        flatDir {
            dirs './libs'
        }
    }
/*    productFlavors {
        _360 {}
        tencent {}
        baidu {}
        oppo {}
        vivo {}
        huawei {}
        xiaomi {}
        googleplay {}
    }
    productFlavors.all {
            //批量修改，类似一个循序遍历
        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }*/
    //对生成的apk进行一些简单的配置
   /* applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def buildName = "com.meishe"
            def type = variant.buildType.name
            if (type == "debug" || type == "debug_faceU") {
                def releaseApkName = 'app-debug'
                outputFileName = new File("../.././../../../build/outputs/apk/debug", releaseApkName + '_' + type + '.apk')
            } else {
                def releaseApkName = buildName + '_' + variant.productFlavors.get(0).name + '_' + type + "_" + versionName + '_' + releaseTime() + '.apk'
                outputFileName = releaseApkName
            }
        }
    }*/
}

static def releaseTime() {
    return new Date().format("yyyy-MM-dd--HH-mm-ss", TimeZone.getTimeZone("GMT+8"))
}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation(name: 'library-ui-release', ext: 'aar')
    implementation(name: 'library-core-release', ext: 'aar')
    implementation(name: 'extension-flac-release', ext: 'aar')
    implementation(name: 'STMobileJNI', ext: 'aar')
    implementation(name: 'cafconvertor', ext: 'aar')

    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    api 'com.squareup.okhttp3:okhttp:3.6.0'
    implementation 'com.google.code.gson:gson:2.7'
    // Glide 图片库
    api 'com.github.bumptech.glide:glide:4.6.1'

    api 'com.facebook.fresco:fresco:1.12.0'
    // 支持 GIF 动图，需要添加
    implementation 'com.facebook.fresco:animated-gif:1.12.0'
    // 支持 WebP （静态图+动图），需要添加
    implementation 'com.facebook.fresco:animated-webp:1.12.0'
    implementation 'com.facebook.fresco:webpsupport:1.12.0'
    // 仅支持 WebP 静态图，需要添加
    implementation 'com.facebook.fresco:webpsupport:1.12.0'
    testImplementation 'junit:junit:4.12'
    implementation 'com.github.warkiz.widget:indicatorseekbar:2.1.2'


}

def meisheSdkExtraPath(File rootDir) {
    String defaultPath = "../../../../"
    try {
        File confFile = new File(rootDir.getAbsolutePath() + "/../../../meishesdk_libpath.conf")
        if (!confFile.exists()) {
            if (confFile.createNewFile()) {
                FileOutputStream outputStream = new FileOutputStream(confFile)
                outputStream.write(defaultPath.getBytes())
                outputStream.close()
                return defaultPath
            }
        }
        BufferedReader br = new BufferedReader(new FileReader(confFile))
        String readline = ""
        StringBuffer sb = new StringBuffer()
        while ((readline = br.readLine()) != null) {
            sb.append(readline)
        }
        br.close()
        String pathTmp = sb.toString()
        pathTmp = pathTmp.replace("\\", "/")
        if (!pathTmp.endsWith("/")) {
            pathTmp += "/"
        }
        if (pathTmp == null || pathTmp.isEmpty()) {
            pathTmp = defaultPath
        }
        print("sdk path:" + pathTmp)
        return pathTmp
    } catch (Exception e) {
        e.printStackTrace()
    }
    return defaultPath
}
